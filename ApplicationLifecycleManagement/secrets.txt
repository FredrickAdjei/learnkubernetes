In Kubernetes, Secrets are used to store and manage sensitive information, such as API keys, passwords, or certificates. Secrets are stored as base64-encoded data, but they are not encrypted, so they are considered relatively secure but not foolproof. 
Here's how you can create and use Secrets in Kubernetes:

You can create a Secret in Kubernetes using kubectl or by defining it in a YAML manifest file. 
Here's an example of a simple Secret in YAML format:

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  username: dXNlcm5hbWU=  # Base64-encoded "username"
  password: cGFzc3dvcmQ=  # Base64-encoded "password


data contains the base64-encoded sensitive data.
type specifies the type of Secret. Opaque is the default and is used for arbitrary data.
You can create the Secret by applying this YAML file using kubectl apply -f secret.yaml.

But how do you convert the data
from plain text to an encoded format?
On a Linux host, run the command echo-n,
followed by the text you're trying to convert
which is my SQL in this case.
And pipe that to the base 64 utility.
--- echo -n "mysql" | base64


To view more information on the newly created secret
run the kubectl, describe secret comman
This shows the attributes in the secret
but hides the value themselves.
To view the values as well.
Run the kubectl, get secret command
with the output displayed in a YAML format.
Using the dash O option.
You can now see the hand coded values as well.

to encode 

echo -n "mysql" | base64

to decode 

echo -n "bXlzcWwK" | base64 --decode


You can inject Secrets into a pod in several ways:
Environment Variables: You can set environment variables in your pod definition, referencing the values stored in the Secret. Here's an example:


apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: my-app-image
    env:
    - name: SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: my-secret
          key: username
    - name: SECRET_PASSWORD
      valueFrom:
        secretKeyRef:
          name: my-secret
          key: password

Volume Mounts: You can mount the entire Secret as a volume in a pod and access the data as files. Here's an example:
apiVersion: v1
kind: Pod
metadata:
  name: my-pod
spec:
  containers:
  - name: my-container
    image: my-app-image
    volumeMounts:
    - name: secret-volume
      mountPath: /etc/secret
  volumes:
  - name: secret-volume
    secret:
      secretName: my-secret
In this example, the Secret is mounted at /etc/secret, and you can access the username and password as files.

